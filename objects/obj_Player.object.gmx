<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprPlayerRight</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Set image speed
imageSpeed = 0.2;
canShoot = true;    //Enables shooting
dirAim = 1;

///Initial variables
hsp = 0;
vsp = 0;

//Movement Parameters
acceleration = 2;   //aceleracion en tierra
airFriction = 0.1;  //friccion en el aire  
airAcceleration = 1;//aceleracion en el aire
topSpeed = 6;      //velocidad maxima
sprintSpeed = 8;   //velocidad al correr
jumpHeight = 50;    //altura de salto
wallJumpSpeed = 10; //velocidad de salto contra la pared
fireRate = 10;      //cadencia de disparo(balas/segundo)
//end Parameters


//Initialize state variable
state = GROUND;

//Animations for teleportation
animIn = false;
animOut = false;
timeFreeze = false;

//Don't Touch these variables.( They re here for calculations ).
doubleJump = true;
runSpeed = sprintSpeed - topSpeed;
jumpSpeed = sqrt ( 2*GRAVITY*jumpHeight );

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Enables shooting
canShoot = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Get the player's input
scr_get_input();

//In case we re stuck
if ( key_restart )
    room_goto(room);

//Decides which state we are in.
switch(state)
{
    case GROUND:    scr_ground();
                    break;
    case AIR:       scr_air();
                    break;
    case TELEPORT:  scr_teleport(); 
                    break;
    case STAIR:     scr_stair();
                    break;
    default:        show_debug_message("NO STATE FOUND");
                    break;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
draw_self();
draw_set_color(c_yellow);

placeX =  view_xview[0]+ view_wview[0]-160;
placeY =  view_yview[0] + 40;
grounded = place_meeting(x,y+1,obj_Wall);
if ( state = GROUND)
draw_text(placeX,placeY,"STATE = GROUND " );
else if(state = AIR)
draw_text(placeX,placeY,"STATE = AIR " );
else if(state = TELEPORT)
draw_text(placeX,placeY,"STATE = TELEPORT " );
else if(state = STAIR)
draw_text(placeX,placeY,"STATE = STAIR " );
else
draw_text(placeX,placeY,"NO STATE FOUND " );
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>16,16</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
