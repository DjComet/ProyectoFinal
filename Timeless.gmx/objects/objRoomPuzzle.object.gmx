<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprRoomPuzzle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-500</depth>
  <persistent>0</persistent>
  <parentName>objRoomPuzzleFrame</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>hsp = 0;
vsp = 0;
radio = 100;    //to detect if iÂ´m pressed by the mouse button
moving = false; //checks if the room is moving
velocity = 9;   //speed at which the smallrooms are moved
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>controller = instance_nearest(x,y,objRoomPuzzleController);

//If the player is touching the controller
if ( controller.enableMove)
{
    distanceSqr = sqr(mouse_x - x) + sqr(mouse_y - y);
    
    if ( (sqr(radio) &gt; distanceSqr ) &amp;&amp; mouse_check_button_pressed( mb_right) &amp;&amp; !moving)
    {
        moving = true;
        right = !place_meeting(x+1,y,objRoomPuzzleFrame);
        left = !place_meeting(x-1,y,objRoomPuzzleFrame);
        up = !place_meeting(x,y-1,objRoomPuzzleFrame);
        down = !place_meeting(x,y+1,objRoomPuzzleFrame);
        hdir = right - left;
        vdir = down - up;
        
        hsp = hdir*velocity;
        vsp = vdir*velocity;    
    }

    //Collisions___________
    if ( place_meeting(x+hsp,y,objRoomPuzzleFrame ) )
    {
        while( !place_meeting(x+sign(hsp),y,objRoomPuzzleFrame) )
        {
            x+=sign(hsp);
        }
        hsp = 0;
    }
    x+=hsp;
    
    if ( place_meeting(x,y + vsp,objRoomPuzzleFrame ) )
    {
        while( !place_meeting(x,y+sign(vsp),objRoomPuzzleFrame) )
        {
            y+=sign(vsp);
        }
        vsp = 0;
    }
    
    y+=vsp;
}

//Check if it's moving
if(hsp == 0 &amp;&amp; vsp == 0 )
{
    moving = false;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
